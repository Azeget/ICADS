import os
import json
import traceback

from typing import Any, Dict, List, Optional
from os.path import join as pjoin

from logger import get_writer

logger = get_writer('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')

get_dir = os.path.dirname
core_path = get_dir(get_dir(get_dir(__file__)))

_global_data: Dict[str, Any] = {}


def read(rel_path: str) -> dict:
    '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º'
    try:
        path = pjoin(core_path, rel_path)
        logger.trace(f'Reading "{path}"')
        with open(path, "r", encoding="utf-8") as file:
            return json.loads(file.read())
    except Exception as e:
        logger.error(traceback.format_exc())
        raise e


def write(rel_path, data):
    try:
        path = pjoin(core_path, rel_path)
        logger.trace(f'Writing to "{path}"')
        with open(path, "w", encoding="utf-8") as file:
            file.write(json.dumps(data, ensure_ascii=False, indent=4))
    except Exception as e:
        logger.error(traceback.format_exc())
        raise e


class _Responses(dict):
    def __getitem__(self, __k):
        try:
            return super().__getitem__(__k)
        except KeyError:
            return _StandardDefaults.responses.__getitem__(__k)


class __UserDefinedDefaults:
    '''
    –∑–∞–ø–∏—Ö–∏–≤–∞–π —Å—é–¥–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–≤–æ–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ –ë–î

    –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–∏—Ö
    –∞—Ç—Ä–∏–±—É—Ç–æ–≤, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –ø–æ–º–µ—à–∞–ª–æ –≤ –±—É–¥—É—â–µ–º –∫–æ–º—É-—Ç–æ –¥—Ä—É–≥–æ–º—É –¥–æ–±–∞–≤–∏—Ç—å
    —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ—Ç, –±–ª–¥—è—å, –Ω–µ –Ω–∞–¥–æ –Ω–∞–∑—ã–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç "1", –æ–ø–∏—à–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ,
    —á–µ —Ç–∞–º, —Å—É–∫–∞, —Ö—Ä–∞–Ω–∏—Ç—Å—è (–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º —Ç—É–≥–æ —Å –º–æ–∑–≥–∞–º–∏, –ø–∏—Ç–æ–Ω —É–º–µ–µ—Ç –≤ —é–Ω–∏–∫–æ–¥,
    –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ —Ç—É–ø–æ –Ω–∞–ø–∏—Å–∞—Ç—å "—Å—É–ø–µ—Ä_–¥—É–ø–µ—Ä_–¥–∞–Ω–Ω—ã–µ_–∂–æ—Ä–∏–∫–∞"))
    '''


class _StandardDefaults(__UserDefinedDefaults):
    # –¥–∞, —è –∑–Ω–∞—é, —á—Ç–æ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –º–Ω–µ –ø–æ—Ö—É–π, –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
    owner_id: int = 0
    host: str = ""
    installed: bool = False
    dc_secret: Optional[str] = None
    access_token: str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    me_token: str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    secret: str = ""
    chats: dict = {}
    trusted_users: List[int] = []
    templates: List[dict] = []
    anims: List[dict] = []
    voices: List[dict] = []

    to_group_saved_group_id: 'int | None' = None

    auth_token: str = ''
    auth_token_date: int = 0

    settings: dict = {
        "silent_deleting": False
    }

    lp_settings: dict = {
        "ignored_users": [],
        "prefixes": [".–ª", "!–ª"],
        "binds": {},
        "key": ""
    }

    responses = _Responses({
        "del_self": "&#13;",
        "del_process": "–£–î–ê–õ–Ø–Æ –©–ê–©–ê–© –ü–ê–î–ê–ñ–ñ–´",
        "del_success": "‚úÖ *–ü—Ä–æ–∏–∑–æ—à–ª–æ —É–¥–∞–ª–µ–Ω–∏–µ*",
        "del_err_924": "‚ùó –ù–µ –ø—Ä–æ–∫–∞—Ç–∏–ª–æ. –î–µ–∂—É—Ä–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? ü§î",
        "del_err_vk": "‚ùó –ù–µ –ø—Ä–æ–∫–∞—Ç–∏–ª–æ. –û—à–∏–±–∫–∞ VK:{–æ—à–∏–±–∫–∞}",
        "del_err_not_found": "‚ùó –ù–µ –Ω–∞—à–µ–ª —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ü§∑‚Äç‚ôÄ",
        "del_err_unknown": "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ üëÄ",
        "chat_subscribe": "–†–ê–ë–û–¢–ê–ï–¢ üëç<br>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∏–∫–∞<br>{–∏–º—è}<br>–≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏—Ä–∏—Å–∞: {–∏–¥}",
        "chat_bind": "–ß–∞—Ç '{–∏–º—è}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!",
        "user_ret_ban_expired": "üíö –°—Ä–æ–∫ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å—Å—ã–ª–∫–∞} –∏—Å—Ç–µ–∫",
        "user_ret_process": "üíö –î–æ–±–∞–≤–ª—è—é {—Å—Å—ã–ª–∫–∞}",
        "user_ret_success": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å—Å—ã–ª–∫–∞} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É",
        "user_ret_err_no_access": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {—Å—Å—ã–ª–∫–∞}.<br>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.<br> –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –≤ –º–æ–∏—Ö –¥—Ä—É–∑—å—è—Ö –∏–ª–∏ –æ–Ω —É–∂–µ –≤ –±–µ—Å–µ–¥–µ",
        "user_ret_err_vk": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å—Å—ã–ª–∫–∞}.<br>–û—à–∏–±–∫–∞ –í–ö.<br>",
        "user_ret_err_unknown": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å—Å—ã–ª–∫–∞}.<br>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        "user_ret_self": "‚ùó –Ø —É–∂–µ —Ç—É—Ç.",
        "to_group_success": "‚úÖ –ó–∞–ø–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞",
        "to_group_err_forbidden": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ —á–∏—Å–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Å—É—Ç–∫–∏, –ª–∏–±–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∞—è –∑–∞–ø–∏—Å—å, –ª–∏–±–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç–µ–Ω–µ",
        "to_group_err_recs": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
        "to_group_err_link": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å —Å—Å—ã–ª–∫–∏",
        "to_group_err_vk": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –û—à–∏–±–∫–∞ VK:<br>{–æ—à–∏–±–∫–∞}",
        "to_group_err_unknown": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        "repeat_forbidden_words": [
            "–ø–µ—Ä–µ–¥–∞—Ç—å",
            "–∫—É–ø–∏—Ç—å",
            "–ø–æ–≤—ã—Å–∏—Ç—å",
            "–∑–∞–≤–µ—â–∞–Ω–∏–µ",
            "–º–æ–¥–µ—Ä"
        ],
        "repeat_if_forbidden": "–Ø —ç—Ç–æ –ø–∏—Å–∞—Ç—å –Ω–µ –±—É–¥—É.",
        "ping_duty": "{–æ—Ç–≤–µ—Ç}<br>–û—Ç–≤–µ—Ç –∑–∞ {–≤—Ä–µ–º—è}—Å–µ–∫.",
        "ping_myself": "{–æ—Ç–≤–µ—Ç} CB<br>–ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ {–≤—Ä–µ–º—è}—Å–µ–∫.<br>–í–ö –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {–ø–∏–Ω–≥–≤–∫}—Å–µ–∫.<br>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ}—Å–µ–∫.",
        "ping_lp": "{–æ—Ç–≤–µ—Ç} LP<br>–ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ {–≤—Ä–µ–º—è}—Å–µ–∫.<br>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ}—Å–µ–∫.",
        "info_duty": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä–Ω–æ–º:<br>IrCA Duty v{–≤–µ—Ä—Å–∏—è}<br>–í–ª–∞–¥–µ–ª–µ—Ü: {–≤–ª–∞–¥–µ–ª–µ—Ü}<br>–ß–∞—Ç–æ–≤: {—á–∞—Ç—ã}<br><br>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:<br>Iris ID: {–∏–¥}<br>–ò–º—è: {–∏–º—è}",
        "info_myself": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä–Ω–æ–º:<br>IrCA Duty v{–≤–µ—Ä—Å–∏—è}<br>–í–ª–∞–¥–µ–ª–µ—Ü: {–≤–ª–∞–¥–µ–ª–µ—Ü}<br>–ß–∞—Ç–æ–≤: {—á–∞—Ç—ã}<br><br>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:<br>Iris ID: {–∏–¥}<br>–ò–º—è: {–∏–º—è}",
        "not_in_trusted": "–Ø —Ç–µ–±–µ –Ω–µ –¥–æ–≤–µ—Ä—è—é üòë",
        "trusted_err_no_reply": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "trusted_err_in_tr": "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_err_not_in_tr": "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_success_add": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å—Å—ã–ª–∫–∞} –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_success_rem": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å—Å—ã–ª–∫–∞} —É–¥–∞–ª–µ–Ω –∏–∑ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_list": "–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
    })


class DB(_StandardDefaults):
    '–∑–¥–µ—Å—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–π –≤ __UserDefinedDefaults'

    def __init__(self):
        _global_data.update(read('database.json'))
        _global_data['responses'] = _Responses(_global_data.get('responses', {}))

    def __getattribute__(self, __name: str) -> Any:
        if __name in _global_data:
            return _global_data[__name]
        obj = object.__getattribute__(self, __name)
        if isinstance(obj, (list, dict, set)):
            obj = obj.copy()
        elif not (isinstance(obj, (str, int, bool, tuple, float)) or obj is None):
            return obj
        _global_data[__name] = obj
        return _global_data[__name]

    def __setattr__(self, __name: str, __value: Any) -> None:
        _global_data[__name] = __value

    def __getitem__(self, __name: str) -> Any:
        return getattr(self, __name)

    def sync(self) -> str:
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ —Å —Ñ–∞–π–ª–æ–º'
        write('database.json', _global_data)
        return "ok"


def _update():
    # –∫—Ç–æ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è —Å –≤–µ—Ä—Å–∏–∏ –∏—é–ª—è 2020 –≥–æ–¥–∞ -
    # - –Ω–µ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ—Å—å –Ω–∞—Ö—É–π, —Å–∏–¥–∏—Ç–µ —Å–æ —Å–≤–æ–∏–º IDM SC mod
    gen = read('database/general.json')
    usr = read(f'database/{gen["owner_id"]}.json')
    write('database.json', dict(gen, **usr))


try:
    read('database.json')
except (FileNotFoundError, json.JSONDecodeError):
    write('database.json', {})
    try:
        _update()
    except Exception:
        pass

db = DB()  # –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–¥–∏–Ω –ø–æ—Ç–æ–∫, –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä, –º–Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ –¥–æ –ø–∏–∑–¥—ã
