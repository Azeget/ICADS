import time

from duty.objects import dp, MySignalEvent, db
from duty.utils import find_mention_by_event, get_plural, cmid_key
from typing import Union
import requests
from microvk import VkApi
from flask import  request


DC_HOST = 'https://api.lisi4ka.ru/'
DC_GROUP_ID = -195759899

errors = {
    0: (
        '‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n'
        '–í–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–≥–æ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ'
    ),
    1: '‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ',
    2: '‚ùó –£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–µ–∂—É—Ä–Ω—ã–π —Ç–µ–±–µ –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç',
    3: '‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –¥–µ–∂—É—Ä–Ω–æ–≥–æ',
    4: (
        '‚ùó –ù–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–π —á–∞—Ç\n'
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å —á–∞—Ç (–Ω–∞ —Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –Ω–µ –Ω–∞ —ç—Ç–æ–º)'
    ),
}


class RequestError(Exception):
    pass


def make_dc_request(event: MySignalEvent, path: str, **data):
    data.update({'owner_id': event.db.owner_id, 'secret': db.dc_secret})
    resp = requests.get(DC_HOST + path, timeout=10, json=data)
    if resp.status_code != 200:
        event.send(
            '‚ùó –ü—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–Ω—Ç—Ä–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n'
            '–ù–∞–ø–∏—à–∏ [id230192963|—ç—Ç–æ–º—É —á–µ–ª–∏–∫—É], –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∂–∏–≤–æ–π',
            disable_mentions=1
        )
        raise RequestError
    decoded_response = resp.json()
    if decoded_response.get('status') == 'error':
        event.edit(str(decoded_response['error']))
        raise RequestError
    return decoded_response


@dp.longpoll_event_register('+—Ü–æ–¥')
@dp.my_signal_event_register('+—Ü–æ–¥')
def reg_dc(event: MySignalEvent):
    db.dc_auth = True
    protocol = 'https' if 'pythonanywhere' in request.host else 'http'
    VkApi(db.access_token).msg_op(
        1, DC_GROUP_ID, f'+cod {db.secret} {protocol}://{request.host}/'
    )
    time.sleep(0.5)  # –∞–Ω—Ç–∏–∫–∞–ø—á–∞ –æ—Ç –ª–∏—Å–∞
    event.msg_op(2, f'üÜó –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ò–¥–∏ –ø—Ä–æ–≤–µ—Ä—è–π.')
    return "ok"


@dp.longpoll_event_register('—Ü–æ–¥')
@dp.my_signal_event_register('—Ü–æ–¥')
def dc(event: MySignalEvent):
    try:
        users = make_dc_request(event, 'stat')['count']
    except RequestError:
        pass
    else:
        event.msg_op(2,
            f'üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª' +
            get_plural(users, "—å", "—è", "–µ–π")
        )
    return 'ok'


@dp.longpoll_event_register('—á—Ü')
@dp.my_signal_event_register('—á—Ü')
def chdc(event: MySignalEvent):
    try:
        make_dc_request(event, 'check')
    except RequestError:
        pass
    else:
        event.msg_op(2, '–í—Å—ë —Ö–æ—Ä–æ—à–æ')
    return "ok"


@dp.longpoll_event_register('—á–µ–∫')
@dp.my_signal_event_register('—á–µ–∫')
def check(event: MySignalEvent):
    uid = find_mention_by_event(event)
    if uid is None:
        event.edit(f'‚ùó –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.')
        return "ok"

    try:
        reg = make_dc_request(event, f'reg/{uid}')['is_registered']
    except RequestError:
        return "ok"

    if reg:
        event.edit(f'ü•ë [id{uid}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
    else:
        event.edit(f'üóø [id{uid}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
    return "ok"


@dp.longpoll_event_register('—É–Ω–∞–ø–∏—à–∏', '—É')
@dp.my_signal_event_register('—É–Ω–∞–ø–∏—à–∏', '—É')
def remote_control(event: MySignalEvent) -> Union[str, dict]:
    uid = find_mention_by_event(event)
    if uid is None:
        event.msg_op(2, '‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return "ok"

    try:
        make_dc_request(
            event,
            'repeat',
            user_id=uid,
            chat=event.chat.iris_id,
            local_id=event.msg[cmid_key]
        )
    except RequestError:
        pass
    else:
        event.msg_op(3)
    return "ok"
