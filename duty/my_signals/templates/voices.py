import io
import re
import requests
from html import escape

from duty.objects import MySignalEvent, dp
from duty.utils import format_response

from .template import delete_template, get_template_list


@dp.longpoll_event_register('+–≥—Å')
@dp.my_signal_event_register('+–≥—Å')
def voice_create(event: MySignalEvent) -> str:
    name = re.findall(r"([^|]+)\|?([^|]*)", ' '.join(event.args))
    if not name:
        event.msg_op(2, "‚ùó –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return "ok"
    category = name[0][1].lower().strip() or '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
    name = name[0][0].lower().strip()

    if category == '–≤—Å–µ':
        event.msg_op(2, '‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ' +
                     '—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "–≤—Å–µ"')
        return "ok"

    try:
        if event.reply_message['attachments'][0]['type'] != 'audio_message':
            raise TypeError
    except (KeyError, IndexError, TypeError):
        event.msg_op(2, "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return "ok"

    attach = event.reply_message['attachments'][0]['audio_message']
    data = requests.get(attach['link_ogg'])
    audio_msg = io.BytesIO(data.content)
    audio_msg.name = 'voice.ogg'
    upload_url = event.api('docs.getUploadServer',
                           type='audio_message')['upload_url']
    uploaded = requests.post(upload_url,
                             files={'file': audio_msg}).json()['file']
    audio = event.api('docs.save', file=uploaded)['audio_message']
    del(audio_msg)
    voice = f"audio_message{audio['owner_id']}_{audio['id']}_{audio['access_key']}"

    event.db.voices, exist = delete_template(name, event.db.voices)
    event.db.voices.append({
        "name": name,
        "cat": category,
        "attachments": voice
    })

    event.msg_op(2, f'‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "{name}" ' +
                 ('–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ' if exist else '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ') +
                 f'\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - {attach["duration"]} —Å–µ–∫.')
    return "ok"


@dp.longpoll_event_register('–≥—Å—ã')
@dp.my_signal_event_register('–≥—Å—ã')
def template_list(event: MySignalEvent) -> str:
    message = get_template_list(event, event.db.voices)
    event.msg_op(2, format_response(message, 
        name_genitive='–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
        name_accusative='–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
        name_accusative_cap='–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
        no_templates='üëÄ –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è... –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É "+–≥—Å"'
    ))
    return "ok"


@dp.longpoll_event_register('-–≥—Å')
@dp.my_signal_event_register('-–≥—Å')
def voice_delete(event: MySignalEvent) -> str:
    name = ' '.join(event.args).lower()
    event.db.voices, exist = delete_template(name, event.db.voices)
    if exist:
        msg = f'‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "{name}" —É–¥–∞–ª–µ–Ω–æ'
    else:
        msg = f'‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "{name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    event.msg_op(2, msg, delete = 2)
    return "ok"


@dp.longpoll_event_register('–≥—Å')
@dp.my_signal_event_register('–≥—Å')
def voice_send(event: MySignalEvent) -> str:
    name = ' '.join(event.args).lower()
    voice = None
    for v in event.db.voices:
        if v['name'] == name:
            voice = v
            break
    if voice:
        reply = str(event.reply_message['id']) if event.reply_message else ''
        att = voice['attachments']
        event.api.exe(
            'API.messages.delete({' +
            '"message_ids":'+str(event.msg['id'])+',"delete_for_all":1});' +
            'API.messages.send({'
                '"peer_id":%d,' % event.chat.peer_id +
                '"message":"%s",' % escape(event.payload).replace('\n', '<br>') +
                '"attachment":"%s",' % (att if type(att) == str else att[0]) +
                '"reply_to":"%s",' % reply +
                '"random_id":0});')
    else:
        event.msg_op(2, f'‚ùó –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "{name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    return "ok"
